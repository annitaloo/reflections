What happens when you initialize a repository? Why do you need to do it?

It creates a folder .git where metadata is stored. Without the initialization, there is no version tracking and no git repository.

-----

How is the staging area different from the working directory and the repository?
What value do you think it offers?

It's a transition directory. I'm not quite shure what is the purpose, what I understand is that we can choose what files to commit and not just the hole folder.

-----

How can you use the staging area to make sure you have one commit per logical
change?

We can compare the files in the staged area to the last commit and/or the the working directory before we do our next commit. So we can track where were at in our code.

-----

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

For exemple if I want to try a new look and change the CSS on web project, I can do it in a new branch and change the css/html accordingly, then if itâ€™s good I can add it to the master branch, if not I can discard it.

-----

How do the diagrams help you visualize the branch structure?

It gives an image of a structure that could be complex.

-----

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

All the commits are joined on the same branch. The name of the branch that is merged into the other can then be deleted. We represent it as 2 lines that joins at the merge because it shows with commit is the parent of the other.

-----

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
